{
  "version": 3,
  "sources": ["../../../../../../Users/madebyporter/Dropbox/MBP/Sites/bbx/functions/rss.js"],
  "sourceRoot": "/var/folders/2v/vqsw5zn16l90y70gw8m7mgpw0000gp/T/tmp-87345-noapHS5jo5gG",
  "sourcesContent": ["const https = require(\"https\");\n\nasync function getPosts() {\n  return new Promise((resolve, reject) => {\n    const query = `\n    query {\n      trackCollection(limit:10) {\n        items {\n          name\n          genre\n        }\n      }\n    }\n    `;\n\n    const options = {\n      protocol: \"https:\",\n      hostname: \"graphql.contentful.com\",\n      path: \"/content/v1/spaces/e1azyderdhks\",\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer 9TPgSbVWX8I_TQUarlwH_W7Lzq7CHaxNn9AGWKNMXXM\",\n        \"Content-Type\": \"application/json\",\n      },\n    };\n\n    let posts = \"\";\n\n    const req = https.request(options, (res) => {\n      res.on(\"data\", (data) => {\n        posts += data;\n      });\n\n      res.on(\"end\", () => {\n        const parsedPosts = JSON.parse(posts);\n        resolve(parsedPosts.data.trackCollection.items);\n      });\n      \n    });\n\n    req.on(\"error\", (e) => {\n      console.error(e);\n    });\n\n    req.write(JSON.stringify({ query }));\n    req.end();\n  });\n}\n\nfunction buildRssItems(items) {\n  const truncateLength = 44;\n  \n  return items.map((item) => {\n      return `\n        <item>\n          <title>${item.name}</title>\n          <description>${item.genre}</description>\n        </item>\n        `;\n    })\n    .join(\"\");\n}\n\nexports.handler = async function (event, context) {\n  const rssFeed = `<?xml version=\"1.0\"?>\n  <rss version=\"2.0\" xmlns:atom=\"http://www.w3.org/2005/Atom\">\n  <channel>\n    <title>The Beatbox Club</title>\n    <atom:link href=\"https://thebeatboxclub.com/.netlify/functions/rss\" rel=\"self\" type=\"application/rss+xml\" />\n    <link>https://thebeatboxclub.com</link>\n    <description>The Beatbox Club is a subscription based database of beats by producers.</description>\n    ${buildRssItems(await getPosts())}\n  </channel>\n  </rss>`;\n\n  return {\n    statusCode: 200,\n    contentType: \"text/xml\",\n    body: rssFeed,\n  };\n};"],
  "mappings": ";AAAA,IAAM,QAAQ,QAAQ;AAEtB,0BAA0B;AACxB,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,UAAM,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWd,UAAM,UAAU;AAAA,MACd,UAAU;AAAA,MACV,UAAU;AAAA,MACV,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,eAAe;AAAA,QACf,gBAAgB;AAAA;AAAA;AAIpB,QAAI,QAAQ;AAEZ,UAAM,MAAM,MAAM,QAAQ,SAAS,CAAC,QAAQ;AAC1C,UAAI,GAAG,QAAQ,CAAC,SAAS;AACvB,iBAAS;AAAA;AAGX,UAAI,GAAG,OAAO,MAAM;AAClB,cAAM,cAAc,KAAK,MAAM;AAC/B,gBAAQ,YAAY,KAAK,gBAAgB;AAAA;AAAA;AAK7C,QAAI,GAAG,SAAS,CAAC,MAAM;AACrB,cAAQ,MAAM;AAAA;AAGhB,QAAI,MAAM,KAAK,UAAU,EAAE;AAC3B,QAAI;AAAA;AAAA;AAIR,uBAAuB,OAAO;AAC5B,QAAM,iBAAiB;AAEvB,SAAO,MAAM,IAAI,CAAC,SAAS;AACvB,WAAO;AAAA;AAAA,mBAEM,KAAK;AAAA,yBACC,KAAK;AAAA;AAAA;AAAA,KAIzB,KAAK;AAAA;AAGV,QAAQ,UAAU,eAAgB,OAAO,SAAS;AAChD,QAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOZ,cAAc,MAAM;AAAA;AAAA;AAIxB,SAAO;AAAA,IACL,YAAY;AAAA,IACZ,aAAa;AAAA,IACb,MAAM;AAAA;AAAA;",
  "names": []
}
